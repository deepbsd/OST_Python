Lesson 7:   Advanced Uses of Decorators

Project:


Filename(s):  addarg.py  test_addarg.py


Write a decorator function addarg() that takes an argument and adds that argument 
as the first argument to all calls to decorated functions. So if you wrote:

@addarg(1)
def prargs(*args):
 return args

prargs(2, 3)
prargs("child") 

the output would be: 
(1, 2, 3)
(1, 'child')

Write a test program to verify the decorator's operation.

Note: it's possible the wrapped function will have keyword arguments and these 
should be respected.


***********************
Instructor Comments...
***********************

Hi David,

Here is a relatively simple way to do tests. You can just tack this on to the end of your existing module:

import unittest
class TestCase(unittest.TestCase):
    
    def test_sumall(self):

        @addarg(10)  # make 10 the first argument
        def sumall(*seq):
            return sum(seq)  # add em up

        self.assertEqual(sumall(1,2,3), 16, "Not the right sum 10 + 1 + 2 + 3")
        
unittest.main()

 And here's how this function might of been written adding wraps:

from functools import wraps

def addarg(first_arg):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            return func(first_arg, *args, **kwargs)
        return wrapper
    return decorator


if __name__ == '__main__':
    @addarg(1)
    def prargs(*args):
        """just print, thank you"""
        return print(args)

    prargs(2, 3)
    prargs("child")

    print(prargs.__doc__)
    print(prargs.__name__)

    
    
OSCON was a blast, as usual. I was fortunate enough to be invited to speak,
but my slot was not until late in the conference so I had to worry about my
talk for several days. My topic was pretty arcane, but here's the link to it
in case you're interested:

http://www.oscon.com/open-source-2015/public/schedule/detail/41508

-Pat
Grade:

Great

***********************
End Instructor Comments
***********************


Quiz 1:

Q1: What does the @functools.wraps decorator do?

functools.wraps avoid loss of name and docstring for the calling function that
is decorated.  Normally, the decorated function gets named according to the
function that decorates it.  @wraps prevents that.

Q2: When using a class as a decorator, which method performs the wrapping?


__init__ can preserve the __name__ and __doc__ of the calling function, but
__call__ is the method that actually returns the decorated function.


Q3: What decorator would you use to create a method that does not receive the instance as the first argument?

class C:

  @staticmethod
  def f(x):
    return x.upper()


Notice, f() does not take 'self' as an implied first argument; therefore, it requires
exactly 1 argument:

C.f('hi')

will be equal to 'HI'


