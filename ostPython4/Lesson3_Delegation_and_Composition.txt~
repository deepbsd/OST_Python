Python 4: Lesson 3: Delegation and Composition

Here are your instructions:


Modify the logic of the Tree object to :

*allow data to be stored as an additional attribute of each node (the data
should be passed as an additional argument to __init__()).

*provide a find() method that locates a key (whose value is passed to find()
as an argument) and returns the data associated with the node; if the key is
not present in the tree, the method should raise a KeyError exception.


=== Feedback from Instructor ===

Overall Comments:
This is looking good, just needs an explicit test fot that KeyError.

Example:

try:
   find something you know is not there
except KeyError:
   print("KeyError raised as expected")

Also, self.data should just = value, no need to make self.data be a dict with
the data inside -- that's a layer of indirection that simply adds unnecessary
complexity. 

In __init__, just go 

    self.data = value

It's fine to modify walk() to make it serve find, however I recommend yielding
self and maybe adding a __repr__ to get the string.

def __repr__(self):
    return  "{}:{}".format(self.key, self.data)

However we don't know that the value stored in self.data likes to be made
into a string (the examples are all strings but a Tree could story anything
in self.data)..  Yielding self from walk, is safer and more general.  Another
option is to have walk yield (self.key, self.data) tuples.

That way find can just loop through e.g. 

for obj in walk():
   if obj.key == key:
       ...
   else:
       not found

Good work so far....

    -Kirby



Quiz 1:

Q1: What is the difference between extending a superclass' method and
overriding a superclass' method?

There's a great example of extending in the lesson.  When you subclass a class,
say, dict, you simply add functionality in your subclass's method and call on
the superclass for the rest of the functionality.  So if Dict() is subclassing
dict(), as long as Dict() is only adding functionality and calling the
superclass (dict), then Dict() is extending the functionality of dict().  

If, however, Dict() does not call its superclass--for example, in its init
does not contain a call to the super class with dict.__init__(self, *args,
**kw) or something similar--then Dict() can be said to override its
superclass's init method.  It's no longer extending the existing functionality
of its superclass, it's replace that functionality.



Q2: What is the principal characteristic of a recursively-defined data structure?

It's a structure that uses its own structure to define its own structure.

For example, the Tree.insert() method in the lesson calls the Tree.insert()
method as part of its node positioning algorithm.  Specifically,
Tree.left.insert() and Tree.right.insert() are called.

Likewise, the Tree.walk() method also calls Tree.left.walk() and
Tree.right.walk() recursively.



Q3: What is delegation?

The term describes how methods can inherit their functionality from other
methods of other classes, or from other objects of your own choosing or
creation.  For example, if class Foo() has a method bar(), the functionality
of bar() can be inherited from another class method, say baz(), while Foo()'s
init can be inherited from class foo.  Class Foo(), then, delegates its init
to class foo() but Foo.bar() gets delegated to baz.bar().

Class Foo:
  def __init__(self):
    foo.__init__(self)
  def bar(self, value):
    self.value = value
    return baz.__bar__(self.value)

    

