Lesson 9: Uses of Introspection


Write a program that imports a module and then goes through the module's
namespace to find any functions and print the names of the functions and their
arguments, in the same way as it might appear in a def statement.

Example output:

'def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)'
'def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, **kw)'
'def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)'
'def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)'

===================
MENTOR FEEDBACK:
===================

Overall Comments:
Hi David,

Yes!

Note how "advanced Python" doesn't mean "big code", it means "knowing your way
around the core grammar and understanding the standard library gives you lots
of tools to build with".

Next time you consider doing a project like this, it would probably be a good
idea to write your own module and ransack it's namespace for the functions and
arguments. That way, anybody reviewing your project would know exactly what to
expect in terms of output and/or be able to write a unit test to verify its
proper function.

But that was not a requirement for this project, and you have done an
outstanding job here.

-Pat
Grade:

Great




Quiz 1:

Q1:  Given an object o, how would you determine whether or not the object has
a method m? The result should be True or False.

hasattr(o, 'm')

Mentor Comments:
This will tell you whether the object has an attribute, but how would you extend this  to figure out whether the attribute is a method?

2nd Answer 1:  inspect.ismethod(o.m)

==== Mentor comments:

Excellent. Now all you have to do is combine these statements and 
your answer will be correct.

3rd Answer 1:  


if hasattr(o, 'm') and inspect.ismethod(o.m):
    print("We have a method 'o.m'!")

Note: I stumbled over this for a minute.  Turns out 'o' must be an 
instance of a class and not a class itself for inspect.ismethod() to 
return True.  I was experimenting with random.Random.getstate() and
smtplib.SMTP.connect() and ismethod() wouldn't work unless I first
went s_blob = SMTP().  Only then would inspect.ismethod(s_blob.connect) 
return True.  Before I figured this out, I had to really wrinkle my brow.


Q2:  Given a module m, how would you produce a list object containing 
just the names of the classes defined in the module?

classlist = inspect.getmembers(m, inspect.isclass)

Mentor Comments:
This will not provide a list containing only the names -   you need to do a little bit more with it.

Hmmm.  How about 

clist = inspect.getmembers(m, inspect.isclass)
classlist = []
[classlist.append(n[0]) for n in clist]

classlist should be a list of all the classes in module 'm'.

====== Mentor comments on 2nd attempt:

Perfect!

Q3:  Given a function f, how would you get a string of the names of its
positional and keyword arguments?  Example: if the function is def
f(a,b,c,d=3,*,e): print(a,b,c,d,e), how would you get output '(a, b, c, d=3,
*, e)' from input f?

inspect.formatargspec(*inspect.getfullargspec(f))

instead of 'f', you might need to put the parent module as part of the
function call, such as, perhaps: 

inspect.formatargspec(*inspect.getfullargspec(m.__f__))

or whatever is appropriate to fully name the function.

