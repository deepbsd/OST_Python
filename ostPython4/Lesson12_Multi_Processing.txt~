
Lesson 12:  Multi-Processing


Project:

Filename(s):  mp_control.py  mp_output.py  mp_worker.py


Modify the control module from the final example of the lesson so that, 
instead of asking user for input, it generates a random string of alphabetic 
characters of length one thousand. Similarly modify the output routine 
to print out the length of the final string.

======= Your Comment:
Pretty quick and easy...   I hope!

Dave  :-)

Items Handed In
Open Project Handed In


===============
MENTOR FEEDBACK
===============

Overall Comments:
Hi David,

Right. Quick and easy, for sure.

The worker queue is a popular design pattern for multi-threading and multi-processing.  
You have now seen that the APIs are very similar.


-Pat
Grade:

Great





========
QUIZ  1
========


Q1: Which class in the multiprocessing library is used to model processes?

multiprocessing.Process


Q2: Why is it important to write multiprocessing control programs as a 
module with if __name__ == "__main__":?

So that those programs can be imported as modules without executing processes.
If those processes are launched after the if __name__ == part of the code,
then those processes will not get launched simply by loading the control
program as a module.


Q3:  What two types of Queue does the multiprocessing module provide, and 
what is the difference between them?

A Queue and a JoinableQueue.  A JoinableQueue must be used if you want to
join() that queue.  Using a regular Queue will not let you join() it in your
program.


===============
MENTOR FEEDBACK
===============

Overall Comments:
This is perfect, David.

-Pat
Grade:

Great

