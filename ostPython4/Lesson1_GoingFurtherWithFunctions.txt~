Project 1: Going Further with Functions

Extend the final definition of the composable object to allow it to be raised to 
positive integer powers. This will require defining the __pow__ method.

For the purposes of this exercise, assume that f**2 is the same as f*f, f**3 is 
the same as f*f*f, and so on. So (f**3)(x) is f(f(f(x))).

If the argument is not an integer, the method should raise a TypeError exception; if 
the argument's value is non-positive, the method should raise a ValueError.


======
QUIZ 1
======

Q1: Which function method does the interpreter call to trigger a call of the function?


f(x) mostly equals f.__call__(x)

So __call__ would be the function method triggered


Q2: Which method of a will be called to evaluate the expression a * b?

We don't have a __mul__, apparently, so I would say __call__ still must be
triggered:

>>> def multi(x, y):
...    return x*y
...
>>> a = multi
>>> a(5, 5)
25
>>> a.__call__(5, 5)
25
>>>

Mentor Comments:
You might have another look at the Lesson. How do you know we don't have a __mul__() method?

*** Answer 2:  Obviously we can create a class with a specially-defined
__mul__ method, but the lesson says that the "class of functions is a built-in
object written in C: impossible to change and difficult from which to inherit.
Even when you do subclass the function type, how would you create instances?
The def statement will always create regular functions."

This is what I was referring to, but I was assuming that multi() was a
function, not a class method.  I did look at dir(multi) after the def multi():
statement, and I saw no __mul__ in it.  Nor was there one in
pprint(sorted(function_attrs)) earlier in the lesson.  So after doing 
>>> a = multi
>>> a(5,5)
25

I could see that a.__call__(5,5) returned the same thing as a(5, 5), so
gambled and asserted that there was no __mul__() method in play here.  I
didn't see one after looking.  Was there someplace else I should have looked?
I'm still not seeing one...



Q3: What does the type() built-in function return when you call it with a function as its argument?

>>> type(multi)
<class 'function'>

unless you call the function with arguments. Example:

>>> type(multi(5, 5))
<class 'int'>


Q4: Which name in the types module refers to the type of a function?

types.type()

Mentor Comments:
Not quite. You might try this out in a terminal..

**** Answer 2:

When I call this type() method, I'm assuming it overrides the type() built-in.
But I wanted to distinguish the types.type() method from the type() built-in.
I did try this out in a terminal, and of course I go:

>>> from types import type
>>> type(whatever)

Am I grasping what you're taking exception to in my answer?  Is it just the syntax of
saying type(whatever) instead of types.type(whatever)?  Or is there another
aspect I'm not understanding?


Q5: What is the name of the testing technique that tries to ensure that all the code is tested?

context manager?

Mentor Comments:
A context manager  creates a "sandbox"  within your code - a mini-environment
in which a block of code executes.

**** Answer 2:  Ah! Coverage Testing!!!  Found it:

"Having a good set of tests at least ensures that the code is being exercised
(it's also a good idea to employ *coverage testing*, to ensure that your tests
don't leave any of the code unexecuted: this is not always as easy as you
might think)."

Q6: What is the primary restriction on the lambda?

That the lambda function bodies comprise not more than a single expression.
If it takes more than a single line, just define the function with a name and
a 'def' statement.


Overall Comments:
Hi David,

Welcome back. And welcome to Python 4.   I look forward to sharing this journey with you.  You are off to a great start with a nearly-perfect quiz (Q2, Q4, and Q5 have better answers).

This is a challenging course - it will draw upon many aspects of Python, and perhaps programming in general, that you may not have seen in your previous career.  You will learn and accomplish much, but it will be a significant amount of work.

Here are a few tips, for your consideration:

- The console window is your best friend.  Use it extensively.  There, you can explore the "behind the scenes" aspects of the tools you'll be working with in a very safe "sandbox" environment.

- Use print statements extensively to help you understand how your code is operating; you don't have to guess.

- Read the lessons very thoroughly; often the clues to accomplishing the objectives appear in a single line.

- Resist the urge to copy and paste code from the lessons.  The process of typing, especially in an interactive environment, presents a powerful learning experience.

- Reach out for help/advice as best fits your learning style.  My advice is to struggle a bit with new material - that's important to making it your own - but don't struggle to the point of frustration.  Have no fear that I'll give you the answer.  I can, however, provide pointers, suggestions, and clues that can break the logjam and get you moving toward solution.

Above all, have fun.  This is powerful and interesting material and can be savored as such.

Good Luck!

-Pat
