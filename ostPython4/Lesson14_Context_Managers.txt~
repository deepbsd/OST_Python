Lesson 14:  Context Managers

Project:

Filename(s): context_mgr.py  test_context_mgr.py


Write a context manager class that suppresses any ValueError exceptions 
that occur in the controlled suite, but allows any other exception to be 
raised in the surrounding context.


######  Mentor Feedback:

Overall Comments:
Hi David,

I'm glad you got your arms around assertRaises() it's a mighty handy weapon for your arsenal.

Terrific job on this one. It totally works

You have a short pattern to follow if you want a context manager. An alternative solution:

"""
simple context manager to swallow 
up ValueError Exceptions
"""
from contextlib import contextmanager
@contextmanager
def ValueErrorContextMgr():
    try:
        yield
    except ValueError:
        pass # ignore exception
    except Exception:
        raise

There's a good article at:

http://pymotw.com/2/contextlib/


-Pat
Grade:

Great


=======
QUIZ 1
=======

Q1:  Which method of a context manager is called before execution of the controlled 
suite of the with statement?

Its __enter__() method


Q2:  What form does a context manager take when created with the 
@contextlib.contextmanager decorator?

We're using a generator function with exactly one yield statement (instead of a
class) as a context manager.  Probably want to trap any Exceptions with a
try/except clause.  The with ctx_man() as cm: code from the lesson is an
example of the @contextmanager decorator and how it could be used.


Q3:  What is the default precision for a decimal context?

28 decimal digits


#############  Mentor Feedback:

Overall Comments:
This is completely perfect, David  - awesome work!

-Pat
Grade:

Great


