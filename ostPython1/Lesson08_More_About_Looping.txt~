Lesson 8 (More About Looping) Project

Objective:

This project tests your ability to use more sophisticated loops.

1. Create a new Python source file named para_breaker.py.

2. Write a program to break up a paragraph into sentences and phrases.
   Sentences are delineated by periods and phrases are delineated by commas.

3. Print the results to the screen. You will need to use a loop within a loop.

4. Use the text from the second paragraph of the United States Declaration of
   Independence (provided below).

United States Declaration of Independence to be used in the example:

We hold these truths to be self-evident, that all men are created equal, that
they are endowed by their Creator with certain unalienable Rights, that among
these are Life, Liberty and the pursuit of Happiness. - That to secure these
rights, Governments are instituted among Men, deriving their just powers from
the consent of the governed, - That whenever any Form of Government becomes
destructive of these ends, it is the Right of the People to alter or to
abolish it, and to institute new Government, laying its foundation on such
principles and organizing its powers in such form, as to them shall seem most
likely to effect their Safety and Happiness.  Prudence, indeed, will dictate
that Governments long established should not be changed for light and
transient causes; and accordingly all experience hath shewn that mankind are
more disposed to suffer, while evils are sufferable than to right themselves
by abolishing the forms to which they are accustomed. But when a long train of
abuses and usurpations, pursuing invariably the same Object evinces a design
to reduce them under absolute Despotism, it is their right, it is their duty,
to throw off such Government, and to provide new Guards for their future
security.  - Such has been the patient sufferance of these Colonies; and such
is now the necessity which constrains them to alter their former Systems of
Government. The history of the present King of Great Britain is a history of
repeated injuries and usurpations, all having in direct object the
establishment of an absolute Tyranny over these States. To prove this, let
Facts be submitted to a candid world.

Below is an example of output from running the program.

entence #1
Phrase 1: We hold these truths to be self-evident
Phrase 2: that all men are created equal
Phrase 3: that they are endowed by their Creator with certain unalienable
Rights
Phrase 4: that among these are Life
Phrase 5: Liberty and the pursuit of Happiness
**************************************************
Sentence #2
Phrase 1: - That to secure these rights
Phrase 2: Governments are instituted among Men
Phrase 3: deriving their just powers from the consent of the governed
Phrase 4: -
 That whenever any Form of Government becomes destructive of these ends
Phrase 5: it is the Right of the People
 to alter or to abolish it
Phrase 6: and to institute new Government
Phrase 7: laying its foundation on such principles
 and organizing its powers in such form
Phrase 8: as to them shall seem most likely to effect their Safety and
 Happiness
**************************************************
Sentence #3
Phrase 1: Prudence
Phrase 2: indeed
Phrase 3: will dictate that Governments long established should not be changed for
 light and transient causes; and accordingly all experience hath shewn
 that mankind are more disposed
 to suffer
Phrase 4: while evils are sufferable than to right themselves by abolishing the forms to which they
 are accustomed
**************************************************
Sentence #4
Phrase 1: But when a long train of abuses and usurpations
Phrase 2: pursuing invariably the same Object
 evinces a design to reduce them under absolute Despotism
Phrase 3: it is their right
Phrase 4: it is their duty
Phrase 5: to
 throw off such Government

Here are the files you handed in:
Python1/para_breaker.py

Overall Comments:

Hi David, You have cleaned this up really well. I appreciate your effort - you
have come up with a really high quality product. Great job ! -Pat



GRADE: Great

=======
QUIZ 1
=======
Q1: Write an expression that produces a list object with elements from 0...500
inclusive.


Answer #1:
list(x for x in range(0,501))


Thanks for the hints! Sorry I was so thick on this.

No problem - I really don't believe this it's a thing as "thick". Everybody is
different modes of assimilating new information, and information they find
easier or harder to assimilate.

Sometimes you have to read the lessons pretty carefully to pick this sort of
stuff up. There's an example in the section entitled "zip (*iterables)". FYI,
there are similar commands the let you create other objects such as:

>>> d=dict()
>>> s=set()
>>> t=tuple()

>>> type(d)
<class 'dict'>
>>> type(s)
<class 'set'>
>>> type(t)
<class 'tuple'>

Q2: Write a print loop that counts from 0 to 30 inclusive, by fives.


Answer #2:
answered correctly...

Overall Comments:

Good work, David. Please check out the comments on Q1. -Pat



GRADE: Great

I know we've talked alot about lists and list methods, but did we ever say you
could go 'list()' to some object? I don't remember seeing this. Is that in the
lesson?

Comments:
Your solution works. More simply you might go:

list(range(501))

=======
QUIZ 2
=======
Q1: The code while True: is an infinite loop. How do you terminate this loop?


Answer #1:
break

Comments:
Right. The break statement immediately terminates the loop without waiting for
the condition to be reevaluated.

sys.exit( ), yield and return also may work.

The 'break' statement's philotic twin is the 'continue' statement which moves
execution immediately to the top of the loop.

Q2: Which dict method generates an iterable of (key, value) tuples?


Answer #2:
items()


as in

for key, value in d.items():
    print(key, value)

Comments:
Terrific example.

Q3: How would you remove the dict item whose key is "Steve" from dict d?


Answer #3:
del d["Steve"]

Comments:
The pop() method not only deletes the item, but returns it is well. Check this
out:

>>> d={'a':1, 'b':2}
d
>>> {'a': 1, 'b': 2}
>>> return_value = d.pop('a')
d
{>>> 'b': 2}
>>> return_value
1

...but del does not:

x = del d['ab']
Traceback (most recent call last):
File "<string>", line 1, in <fragment>
Syntax Error: x = del d['a']: <string>, line 1, pos 7

Overall Comments:

This is awesome, David. Keep up the good work. -Pat


GRADE: Great
