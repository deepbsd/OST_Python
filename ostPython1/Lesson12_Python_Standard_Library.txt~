Lesson 12: The Python Standard Library

Project 1:

Filename(s):  guessing_game.py

Objective:

This project tests your ability to use modules and imports.

    1. Create a new Python source file named guessing_game.py.
    2. Import the random module.
    3. Use the help() function on the random module to determine how to generate a random number between 1 and 99 inclusive.
    4. Generate a random number between 1 and 99 and store it in a variable.
    5. Use a while loop to accept integers from the user (don't forgetâ€”you'll need to convert the input string).
    6. Compare the user's guess with the saved random number.
    7. If the user successfully guesses the target number, inform them and terminate the program.
    8. Otherwise, inform the user whether their guess was higher or lower than the saved random number and loop around to allow them to guess again.

Below is an example of possible output from running the program.

Guess a number: 25
Too low
Guess a number: 75
Too high
Guess a number: 60
Too high
Guess a number: 45
Too low
Guess a number: 53
You guessed it!

=======================
=======================
Overall Comments:

Hi David,

This looks really good. Nice touch checking bad user input. Always a good idea because users are a ham-handed/nefarious bunch. You are a couple of friendly comments that you might find useful for future projects:

-Instead of going:

if user_guess == "" :

... You could just go:

if user_guess :

FYI, one way you can make your code more readable is to leverage the way Python does a Boolean evaluation of non-Boolean objects.

Please have a look at this code.  You'll note that you can often simplify expressions - for example instead of going:

if len(user_input) > 0     or  if user_input ==""

... you can substutute:

if user_input

... Here's some code you can play with to demonstrate:

test = [ [1,2,3], {'a':1}, set('element'), 666, "a_string"]

print("These all evaluate True")
for t in test:
    if t:
        print(t)

print("These all evaluate False")		
test = [ [], {}, set(), 0, '']	
for t in test:
    if not t:
        print(t)

-Also, you can squeeze a little efficiency out of your logical tests by using else: where appropriate. Here you're making three independent tests to determine one of three possible states. Once having eliminated two of them, you can deduce the third and don't have to do a further test.

-Pat



GRADE: Great


=======
QUIZ 1
=======
Question #1:

Write code that:

    imports the time module from the Python standard library.
    imports the sys library, giving it the name "system."
    imports your own module called actions.py.



Answer #1:
1. import time


2. import sys as system


3. import actions

Comments:

Question #2:

    If actions.py contains a function named "jump," how would you import just that function?
    How would you import just that function and bind it to the name "leap"?



Answer #2:
1. from actions import leap




2. from actions import jump as leap

Comments:


Overall Comments:

Terrific work here, David.

-Pat



GRADE: Great

=======
QUIZ 2
=======

Question #1:

What is sys.path? How is it used by the Python interpreter?


Answer #1:
sys.path is where the interpreter looks for modules being imported.

These are the directories where the interpreter looks for modules.

Comments:
Right. One important thing to keep in mind is that the interpreter goes from the top of the list to the bottom, stopping when it finds a "matcher". This can produce unexpected results if, for instance, you have inadvertently named a file in your current directory the same name as one of the library modules. Since your current working directory is at the top of the list, the interpreter will never find the library module.
Question #2:

What value does a module's __name__ attribute receive if the module is run as a program?


Answer #2:
__name__ == "__main__"




Comments:
The interactive shell session itself may be considered a "__main__" module. It is running top to bottom, like any module, but a ghostly typist (the user) is adding lines to the bottom of the module in extra slow motion (from the interpreter's point of view -- lots of clock cycles spent doing nothing).

>>> __name__
'__main__'

Conversely, when you execute a script by going something like:

cold1_$ python3 the_module.py

think of the_module.py being entered line by line by some extremely fast typist, with the interpreter processing each line. The point: an interactive session and a running top-level ("__main__") module are not that different in concept.
Question #3:

What is wrong with from module import *?


Answer #3:
Doing this puts "module" in charge of your namespace, and it won't tell you when it clobbers names or symbols you already have assigned in your program. This could be a debugging nightmare.


Pat, I'm answering like I understand how this works, but I really don't!
Is there something about this import * syntax that says "I give all namespace authority over to the module"?

Thanks,
:-)

Comments:
You have got a great answer. I'm a great believer in "fake it till you make it" ;-) It's not so much that your yielding all authority, but you are giving it permission to overwrite your current namespace. Sometimes this is completely okay. If you understand the model getting imported well enough to know that it won't trash what you have already got going then you can't hurt anything. In fact, if you're using a well-known module (Tkinter, Python's native GUI module) your sometimes expected to imported intact. This gives you easy access to the main building block GUI widgets and-perhaps more importantly-makes your code quickly comprehensible to teammates who understand the module and who work in the same way.

This is important stuff, so let me give you the slightly longer story, along with some code to play with...

You've got lots of control over what gets imported into your current namespace.

1. If you just go "import <module>" the module name enters the current namespace and its objects can be accessed using dot notation: "<module>.<child object>". Because the module name is the thing imported, it doesn't matter if two different imported modules have similar internal namespaces - you can differentiate them by referring to "<module_1>.<child object>" and "<module_2>.<child object>". No naming conflicts involved.

2. If you go "from <module> import <object>" you selectively import the <object> name. You can access the object without using dot notation: "<object>". If you go this route, you have a shorthand way to refer to the object, but it will overwrite anything currently in the namespace that has the same name.

3. If you go "from <module> import *" you are importing all the object names into the current namespace.

Clear as mud? Let's hit the terminal.

Create a module with a few objects - a global-level constant, a class, and a method. The first print() statement will execute only if the module itself is executed. The other print statements are buried within their specific containing objects. Call it my_import.py and save it in the current directory:

## my_import.py ##
CONST=10
print("my_module is entering namespace")
class c():
"some class"
def __init__(self):
print("c instance created!")

def method():
"some method"
print("method here")

## end of my_import.py ##

Lets' look at the "import <module>" style:

3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 10:45:13) [MSC v.1600 64 bit (AMD64)]
Python Type "help", "copyright", "credits" or "license" for more information.

...Here's the original namespace of a fresh console:

>>> dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

...Now we can import the module:

>>> import my_import
my_module is entering namespace
>>> dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'my_import']

...You can see that 'my_import' has entered the namespace. We can now access it's methods/attributes with dot notation.

>>> my_import.method
<function method at 0x00000000033BBC80>
>>> my_import.method()
method here

***************************

Lets look at the "from <module> import <object>" style

Now, open a fresh console and query for its initial namespace using dir():

3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 10:45:13) [MSC v.1600 64 bit (AMD64)]
Python Type "help", "copyright", "credits" or "license" for more information.

>>> dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

... Import an object from my_import.py and check the namespace again:

>>> from my_import import c
my_module is entering namespace
>>> dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'c']

... you can see we have a new member, 'c'. Let's check it out:

>>> c
<class 'my_import.c'>

***********************

Finally, let's start with a fresh terminal and check it's namespace:

3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 10:45:13) [MSC v.1600 64 bit (AMD64)]
Python Type "help", "copyright", "credits" or "license" for more information.

dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

... let's create our own object 'c', then check out the namespace and ensure the value of 'c' is what we specified:

>>> c="SOME FRIGGN NEW VALUE"
>>> dir()
['__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'c']

>>> c
'SOME FRIGGN NEW VALUE'

...Now, let's use the last method of importing:

>>> from my_import import *
my_module is entering namespace

>>> dir()
['CONST', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'c', 'method']

... you can see we have all the objects from the imported module available on a "first name" basis:

>>> c
<class 'my_import.c'>

... an you will note the price we paid for the convenience - we have a new value associated with 'c', whether we planned for it or not.

Note that this is just fine, and even accepted practice, when your app is essentially building something from primitive objects provided by another library. GUI projects using Tkinter (a topic covered in the second Python course) are examples. Imported primitive objects like Tkinter.Frame and Tkinter.Button widgets are used to build intact GUI apps - there's almost zero chance of overwriting existing objects. Using the short form of 'Button' dozens of times is a whole lot easier/cleaner than 'Tkinter.Button'.

If you kick this stuff around in a console for a bit, it will become crystal clear. If anything here does not make sense, feel free to write back.


Overall Comments:

Hi David,

You've got this one perfect. I tried to explain this import business in a different way in the comments on Q3. Please have a look. If anything doesn't make sense, feel free to drop me a support email.

-Pat



GRADE: Great
