Lesson 5 Project (Sequence Containers: Lists and Tuples)

Objective:

This project tests your ability to use sequences.

1. Create a new Python source file named word_list.py.

2. Make the program read a string from the user and create a list of words
   from the input.

3. Create two lists, one containing the words that contain at least
   one upper-case letter and one of the words that don't contain any
   upper-case letters.
	    
4. Use a single for loop to print out the words with upper-case
   letters in them, followed by the words with no upper-case
   letters in them, one word per line.

5. Verify that your program works correctly, and hand it in.

Below is an example of output from running the program.

		    Input your text: Python and Perl are both programming
		    languages
		    Python
		    Perl
		    and
		    are
		    both
		    programming
		    languages

Here are the files you handed in:
Python1/word_list.py

Overall Comments:

Hi David, Your instincts are great because I would've had to turn it back if
they were 2 print loops (cf. instruction 4.) This totally works. It is a bit
more complicated than it has to be, however. You might take another look at
the logic. First you test if the word is all lowercase (this is perfect). Once
you've determined that the word is not all lowercase, isn't this sufficient
information to categorize it? You don't really need to pick through it
character by character. Also, FYI, the split() method defaults to "one or more
white space characters". This is usually what you want for splitting up words
because it handles the fact that there are typically two spaces after a
period, one space between words, for spaces in front of indented paragraphs,
etc. -Pat



GRADE: Great

=======
QUIZ 1
=======
Q1: What are Python's three basic sequence types?


Answer #1:
list
tuple
strings

Comments:
The range object is a full-fledged sequence permitting even negative indexing
as of only 3.2 or 3.4.

The bytearray is another basic sequence.

Console play:

>>> f = open('binary.bin','wb')
>>> f.write(b'A BUNCH OF BYTES')
16
>>> f.close()
>>> f = open('binary.bin','rb')
>>> bytes = f.read(4)
>>> type(bytes)
<class 'bytes'>
>>> bytearray
<class 'bytearray'>
>>> z = bytearray(bytes)
>>> z
bytearray(b'A BU')
>>> type(z)
<class 'bytearray'>
>>> type(bytes)
<class 'bytes'>
>>> bytes[2]
66
>>> z[2]
66

Q2: Look at this code:

lst = [9, 8, 7]

How do you access the third element of lst?


Answer #2:
lst[2]

Comments:
Right. You can also go:

lst[-1]

... which gets the last element of any list.

Overall Comments:

Good work here, David. -Pat

GRADE: Great

========
QUIZ 2
========
Q1: If the name lst is bound to the list [1, 2, 3] at the outset each time,
what is lst after each of the following two statements?

lst[2] = [1, 2, 3]
lst[2:] = [1, 2, 3]



Answer #1:
After 1st statement:

[1, 2, [1, 2, 3]]



After 2nd statement:

[1, 2, 1, 2, 3]


Q2: What expression will evaluate to True if "fox" is an element of the list
wordlist and False otherwise?


Answer #2:
"fox" in wordlist 

Comments:
Preview / Big Picture:

under the hood, using "in" like this triggers the __contains__ method of
wordlist.  The list type has a __contains__, as do many other native types,
such as tuples and dicts.

When you define your own classes, you have the option to take these "special
names" (funny underline appearance, look like __ribs__) like __add__ ,
__contains__, __getattr__ and define them yourself.

When someone goes:

>>> newobj = Myclass()
>>> "fox" in newobj
True

that might be because you defined __contains__ in some quirky way,
say to always return True.

Example:

>>> class Myclass:
...     def __contains__(self, thing):
...         return True
...
>>> obj = Myclass()
>>> "fox" in obj
True

Defining __add__ says what happens when you use the + operator. I.e. it's
"operator overloading" that we're doing, but then other syntax besides
operators may be overridden this way too (by defining some under-the-hood
__rib__). When you go

>>> obj.a # ordinary dot notation

that's calling obj.__getattr__(a) -- provided 'a' is not found by
"ordinary means" first -- we get to that later.

All of which is to say: Python gives you a lot of power to define the
behavior of your own types of object.

Overall Comments:

Good work here, David. Please have a look at the comments on Q2. -Pat


