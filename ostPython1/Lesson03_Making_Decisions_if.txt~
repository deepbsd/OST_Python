Lesson 3 Project:

Objective:

This project tests your ability to use conditional tests and write code that
responds differently to different inputs.

Create a new Python source file named check_string.py.
Write a program that asks the user to input a string. Verify with
tests that the string is all in upper case and ends with a period. If
either of these tests fails, print an appropriate message. If both
tests succeed, print a message that indicates the string is
acceptable.

Verify that your program works correctly and hand it in.

Here are examples of how the program might appear when run twice:

Enter an upper-case string ending with a period: lower case input
Input is not all upper case.
Input does not end with a period.
Please enter an upper-case string ending with a period: THIS IS OK.
Input meets both requirements.


Here are the files you handed in:
Python1/check_string.py

Overall Comments:

Hi David, This works perfectly. A few other remarks/observations:
You typically don't need to set Boolean flags in a while loop.
It's okay to do so, but it's much cleaner and simpler to use the
"break" keyword to get out of the loop, or the "continue" keyword
to pop execution back to the top. If you do that, you can use this
sort of structure: 

while True: 
    if termination_condition: 
        break 
    if start_at_top_condition: 
        continue 
	
-Everything returned from the input() statement is inherently a string. 
No conversion required, in this case. 

-If you want to learn more about how a particular built-in method works, 
a really good source is the in-line help system. You could, for instance, 
go: 

>>> help("".isalnum) 

Help on built-in function isalnum: 

isalnum(...) method of builtins.str instance 
S.isalnum() -> bool 

    Return True if all characters in S are alphanumeric 
    and there is at least one character in S, False otherwise. 
    
-If you have questions, it's better to send me a
support email than to bury them in code. They are pretty easy for
me to miss if presented this way (you got me on a good day ;-)
Overall, though, this is pretty good. -Pat

GRADE: Great


============
QUIZ 1
============
Q1: Question #1:
What operator do you use to see if two things are not equal?

Answer #1:
if var_one != var_two :
    print("Fail")

Comments:

Q2: Is the following statement true?

"O'Reilly School" == "O'REILLY SCHOOL"



Answer #2:
False

Comments:
Right. Python is case-sensitive, as a console session might demonstrate:

Here, we're asking the interpreter to report on the type:

>>> type("A")
<type 'str'>
>>> type("a")

...and whether it thinks they are equal:
<type 'str'>
>>> "A"=="a"
False

Each object has its own internal id, which we can also access:

>>> id("A")
44636064
>>> id("a")
30432984

... and each character has its ordinal (numerical) assignment:

>>>ord("A")
65
>>> ord("a")
97

Q3: Question #3:

Which string method returns true if the string it's applied to is non-empty
and contains only alphanumeric characters?


Answer #3:
str = "I am 8 years old"

if str.isalnum() :
    # why doesn't this work???
    print("This is a kewl stringy method!")
else:
    print("Oh well, not so alpha or numeric?")


# I left a comment in my homework about this. Is a period NOT
# alphanumeric?

# I tried this in IDLE and it didn't work??? I left out period
# too. Wha? IDLE printed "Not so alpha or numeric?"

Comments:
I responded to your comments in your last assignment. I strongly encourage you
to use the in-line help system as a first line of inquiry. help(isalnum) would
be really useful here.

I should take a moment here to emphasize two ways to invoke .isalnum().

If you have a string, say s1, then s1.isalnum() will tell you if it's
alphanumeric or not (True or False). Note that parens MUST be used, yet there
is NO argument
because s1 itself is "the subject of the sentence" (one could say).

Another way to use isalnum, and all the other string methods, is to anchor
them in the str object, which is the builtin name for the string type, and
than take an argument:

str.isalnum(s1) # s1 is a specific string, str is the string type.

Pattern:

subject.verb()

versus

type.verb(subject)

Another example:

>>> thelist = ['A','B','C']
>>> list.pop(thelist) # pattern 2, list.pop(argument) where list is generic
>>> list type
'C'
>>> thelist
['A', 'B']
>>> thelist.pop() # pattern 1, thelist.pop() where thelist is a specific
>>> instance
'B'
>>> thelist
['A']


Q4: Write an expression that will be True if the string "tacky" is contained
in the string s.


Answer #4:
s = "We are the knights who say icky picky whacky tacky goopie wupple"

s1 = "tacky"

# endless loops can be fun too, right? Weeeeeee!
while s1 in s :
    print("I'm happy to program in Python!")

Comments:

Q5: Question #5:

What keyword precedes the suite that will be executed if the condition in an
if statement is false?


Answer #5:
# If a isn't boolean, I guess this could work...??
# or else if a != boolean is it automatically != True?

a = False

if a == True :
    print("true")
elif a == False :
    print("false")
else:
    print("Neither true nor false")

Comments:
Good use of an example.

Overall Comments:

Good work on this, David. Please have a look at the comments. -Pat



GRADE: Great

==========
QUIZ 2
==========
Q1: When a sequence of conditions is evaluated using if ... elif... elif, is
the else keyword mandatory?


Answer #1:
no.

Comments:

Q2: Write an expression that will be True if the last three characters in s
are "end".


Answer #2:
s.endswith("end")

Comments:

Q3: What keyword can you put between two conditions so that the result of the
overall expression is true only when both conditions are true?


Answer #3:
condition1 and condition2

Comments:

Q4: Question #4:

How do you perform a case-insensitive string comparison in Python?


Answer #4:
convert both strings to UPPER or lower, then compare them.

if string1.upper() == string2.upper() :
    do stuff

Comments:

We better go slow here. string1.lower() does NOT mutate string1 in any way,
but rather uses string1 as a read-only guide to which a rule (lowering) is
applied. The result you may imagine as handed back as a new object out the
left side, such that assignment of a name may take place thusly:

>>> brand_new = string1.lower( )

It's important to see brand_new and string1 as now two distinct objects, each
with a future untied to the other.

Now that I've emphasize that string types are immutable, like rocks, other
types are easy to shape, like clay, and change in place.

thelist.reverse()

reverses thelist without making a new list or copy. No extra memory is
consumed by a second object with an independent existence.

In other words, your apparent assumption that string1.lower() could change
string1 itself is a logical hypothesis and does hold true in the case of
mutable object types. You just come to learn the difference between mutable
and immutable (which is a little subtle, maybe more than you realize). In
Python, strings are immutable, whereas maybe in Ruby they're not (a research
question).


Overall Comments:

Thanks for taking a second try at this, David. It looks good now. Please read
and understand the comments on Q4. If you don't get this mutability stuff
straight, it is guaranteed to come back and bite you. FYI ... Unless you want
the extra practice, you don't need to repeat answers that you've gotten
correct on previous attempts. Any placeholder e.g., "already answered" will
work. I have access to all your old work. -Pat



GRADE: Great
