Lesson 2: Entering and Storing Data

Project:

Filename(s):  greeting.py

Objective:

This project tests your ability to perform simple string calculations.

Create a new Python source file named greeting.py.
Write code that uses two separate statements to ask the user for a
first and last name, and then prints out an appropriate greeting.
Verify your program works correctly and hand it in.

Here is an example of how the program might appear when run:

Enter your first name: Steve
Enter your last name: Holden
I am pleased to meet you, Steve Holden




Here are the files you handed in:
Python1/greeting.py

Overall Comments:

Hi David, This work is advertised and definitely passes the
objective. Nice going. A couple of comments that you might find
useful for future projects: -The missing shebang you're looking
for is: #!/usr/local/bin/python3 -You don't need to do a type
conversion to a string just for printing. The print() function is
smart enough to handle this. -As you have discovered, the print()
function automatically applies a separator between arguments ( a
white space), so you don't need to use your own. 

>>> print("Chicago", "Cubs", "motto:", "there's always next year")
    Chicago Cubs motto: there's always next year 

You can override the separator by including it as an argument: 
   
    >>> print("Chicago", "Cubs", "motto:", "there's always next year", sep = " | ") 
    Chicago | Cubs | motto: | there's always next year 

There's also an optional 'end' argument - default is nothing: 
    
    >>> print("Chicago", "Cubs", "motto:", "there's always next year", end='!') 
    Chicago Cubs motto: there's always next year! 
    
-Also, you might consider including a header with your program. 
The first line provides a "hash-bang" tag that indicates which version of 
Python your code was written against. The rest provides a combination of
documentation and "curb appeal", giving your code a professional
look and feel.
	    
#!/usr/bin/python3 
# 
# A Truly Awesome Program 
#       awesome.py 
# 
# by: Patrick Barton 
# 37 Feb 2014 
# 
# Lesson 96, Python 5, Attempt 1 
# " A compelling docstring describing the
	    Truly Awesome Project" -Pat

    GRADE: Great

+++++++++++++++++++++++++++
QUIZ 1
+++++++++++++++++++++++++++
Q1: Question #1:

What is a namespace?


Answer #1:
a space in memory that "holds a name" and "refers to a value"

Comments:
Building on your answer ...

The idea of a namespace relates to concepts of "scope" and "top-level". Names
which "need no introduction" may be mentioned directly, whereas others may
need to be prefixed with the name of another namespace. math.cos would be a
function prefixed with the name math, the name of a module. The purpose of
namespaces is to keep names organized, which includes keeping names from
"colliding" because they're the same and yet refer to different objects that
should not be confused.

Q2: Question #2:

How do you list the contents of a namespace?


Answer #2:
if I'm understanding the question, dir() lists the contents of both built-in
and global spaces (I think...)

Comments:
Pretty close. It actually lists only the contents of the global namespace.

>>> #and this gives you the namespace of an object
...
>>> dir(1)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__',
'__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__',
'__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__',
'__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__',
'__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__',
'__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__',
'__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__',
'__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__',
'__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__',
'__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__',
'__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length',
'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real',
'to_bytes']

Overall Comments:

Good work on this, David. Please take a few minutes and look at the comments.
-Pat



GRADE: Great


=============================
QUIZ 2
=============================
Q1: Question #1:

What are two ways you can add documentation to your Python module?


Answer #1:
# Notes or comments can go above, below or beside
# lines with the pound sign
print("Hello")     # Here's another example of such a "side" note


"""
Or you can make a block of text documentation
that spans several lines and provides deeper
levels of clarification and later use the
print(__doc__) statement
"""

print(__doc__)

Comments:
A couple of points I would draw your attention to:

-"Under the hood" docstring is the first executable line of code. It has to be
a string (triple quoted or double quoted, it doesn't matter) that is not
assigned to a name.

-Docstrings survive compilation whereas comments do not. In other words
comments are only available in the source code.

-A much easier way to access a docstring is to use help()

Q2: Question #2:

How do you separate multiple statements on the same line?

Give an example.


Answer #2:
str_one = "We are the knights "
str_two = "who say 'Ni'!"
print(str_one); print(str_two)


The statements are on the same line, but not the outputs.
outputs on the same line could be:
print(str_one, str_two)


Comments:
Your first answer is correct. But your second example is a single statement
that invokes the print() function, providing two arguments that function.


Overall Comments:

Good work here, David. Please have a careful look at the comments. If you have
questions please don't hesitate to write. -Pat



GRADE: Great
