This added test gave an E:

    def test_map_mentor(self):
        self.home = []
        self.home.append(Bed('Bedroom'))
        self.home.append(Sofa('Living Room'))
        self.home.append(Table('Bedroom'))

        mapping = map_the_home(self.home)
        self.assertTrue(isinstance(mapping['Bedroom'][0], Bed))
        self.assertTrue(isinstance(mapping['Living Room'][0], Sofa))
        self.assertTrue(isinstance(mapping['Bedroom'][1], Table))        

Remember the expected structure:  dict has room (string) keys
and always list values.  Furnishing instances are inside lists,
never by themselves.

Good work so far.


-Kirby





    def setUp(self):
        "Creates setUp values"
        self.home = []
        self.home.append(Bed('Bedroom'))
        self.home.append(Sofa('Living Room'))
        self.home.append(Table('Bedroom'))  # added later
        #self.home.append(Bookshelf('Basement'))
        #self.home.append(Table('Dining Room'))
        #self.home.append(Sofa('Guest Room'))
        #self.home.append(Bed('Guest Room'))

    def test_map_mentor(self):
        mapping = map_the_home(self.home)
        self.assertTrue(isinstance(mapping['Bedroom'][0], Bed))
        self.assertTrue(isinstance(mapping['Living Room'][0], Sofa))
        self.assertTrue(isinstance(mapping['Bedroom'][1], Table))
    '''
    def test_map(self):
        "Tests the homedict that gets returned..."
        homeobj = map_the_home(self.home)
        self.assertIsInstance(homeobj['Guest Room'], Bed)
        self.assertIsInstance(homeobj['Bedroom'], Bed)
        self.assertIsInstance(homeobj['Living Room'], Sofa)
        self.assertIsNot(homeobj['Bedroom'], Table)
    

    def test_count(self):
        "Tests the counter function"
        obsv_dict = counter(self.home)
        exp_Dict = {'Bookshelves':1, 'Tables':1, 'Beds':2, 'Sofas':2}
        self.assertEqual(exp_Dict, obsv_dict)
    '''
