
Lesson 9 Project:  Advanced Objects: Special Methods

Filename(s):  centipede.py test_centipede.py

Create a Pydev project named Python3_Homework09 and assign it to your
Python3_Homework working set. In Python3_Homework09/src, create a program
named centipede.py, including a class named "Centipede." This class has the
following requirements:

1. Once instantiated if called with a value, it appends that argument to an
internal list:
>>> from centipede import Centipede
>>> ralph = Centipede()
>>> ralph('pretzel')
>>> ralph.stomach
['pretzel']
2. If you print() the class, it returns a comma-delimited string of the
internal list:
>>> ralph('pickles')
>>> print(ralph)
pretzel,pickles
3. Each time an attribute is set on the centipede object, it appends the name
of the attribute to another internal list:
>>> ralph.shoes = 100 
>>> ralph.hat = 1
>>> ralph.legs
['shoes', 'hat']
4. The representation of the centipede object must be a comma-delimited string
of this second internal list.
>>> repr(ralph)
'shoes,hat'
5. The legs and stomach attributes should be protected against having their
values reset from outside. They're "internal use only" when it comes to
changing them, and an AttributeError should be raised if attempts are made to
set them.
>>> ralph.legs = 3
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "V:\workspace\Python3_Homework09\src\centipede.py", line 15, in __setattr__
     raise AttributeError("{0} is for internal use only".format(key))
AttributeError: legs is for internal use only

Copy and include this test_centipede.py unittest file, which your centipede program should pass:
	    
import unittest
	        
from centipede import Centipede

class TestBug(unittest.TestCase):
    def test_stomach(self):
        ralph = Centipede()
        ralph('chocolate')
        ralph('bbq')
        ralph('cookies')
        ralph('salad')
        self.assertEqual(ralph.__str__(), 'chocolate,bbq,cookies,salad')
								            
    def test_legs(self):
        ralph = Centipede()
        ralph.friends = ['Steve', 'Daniel', 'Guido']
	ralph.favorite_show = "Monty Python's Flying Circus"
        ralph.age = '31'
        self.assertEqual(ralph.age, '31', "ralph doesn't know how old he is")
        self.assertEqual(ralph.__repr__(), 'friends,favorite_show,age')

    def test_protected(self): 
        ralph = Centipede()
        self.assertRaises(AttributeError, setattr, ralph, "legs", [])
        self.assertRaises(AttributeError, setattr, ralph, "stomach", [])

if __name__ == "__main__":
    unittest.main()



===========
QUIZ 1
===========
Q1: What is the alternative name for special methods?

magic methods

Q2: Which special method is called by the print() built-in?

Apparently, __repr__() is the "official" string representation 
of an object.  The lesson says that even str() uses the repr() 
for something to be printed.

Still, I thought that __str__() is what gets used during printing.  
So I'm still a little confused on this...  I'm thinking I'm going 
to have to play a little bit more with these two...


Q3: Trick question! If __setattr__ sets attributes and __delattr__ deletes
attributes, what method gets attributes?

For attribute retrieval, Python first looks in the instances class, and then
in the class's superclass, and then in the superclass's superclasses, and so
on. Only if the attribute is not found does the interpreter call the
instance's __getattr__ method with the name of the attribute.

__getattr__(obj, name[, default])  returns the value stored in the 

attribute named 'name' if it is stored in object 'obj.__dict__'.  A default
value can be returned if there is no attribute named 'name'.  If there is no
default, an AttributeError exception is raised.


===========
QUIZ 2
===========
Q1: What is a class that only possesses behaviors, not data, and is meant to
be inherited rather than instantiated on its own?

mixin class


Q2: What method do you use to make an object act like a function?

__call__()


