#!/usr/bin/env python3
#
#
#       test_coconuts.py
#
#    Lesson 2: Converting Data to 
#       Structured Objects
#
#     by David S. Jackson
#          4/23/2015
#   
#  OST Python3: The Python Environment
#     for Kirby Urner, Instructor
#
"""
This program tests the functionality of the coconut.py program and 
of the Inventory class methods.
"""

import unittest
from coconuts import Coconut, SouthAsian, MiddleEastern, American, Inventory

class TestCocoNuts(unittest.TestCase):
    """
    Tests add_coconut(), total_weight() methods and tests that weights
    for each coconut type are different
    """

    def test_weight(self):
        """
        Ensures that given defined weights, the total_weight() method 
        returns the correct total weight.
        Add following coconut numbers:  South Asian=2, Middle Eastern=1, 
        American=3
        """
        basket = Inventory()
        drsim = SouthAsian()
        hadji = MiddleEastern()
        jonny = American()

        for n in range(2):
            basket.add_coconut(drsim)
        for n in range(1):
            basket.add_coconut(hadji)
        for n in range(3):
            basket.add_coconut(jonny)

        expected = 19.0
        result = basket.total_weight()
        self.assertEqual(result, expected, "total_weight() is wrong...")


    def test_error(self):
        """
        Ensure that add_coconut() throws an AttributeError if it gets passed 
        a string object
        """
        basket = Inventory()
        coconut = 'SouthAsian'
        self.assertRaises(AttributeError, basket.add_coconut, coconut)


    def test_difweights(self):
        "Ensure that different coconut types have expected weights"
        DrSim = SouthAsian()
        hadji = MiddleEastern()
        jonny = American

        self.assertEqual(DrSim.weight, 3)
        self.assertEqual(hadji.weight, 2.5)
        self.assertEqual(jonny.weight, 3.5)



if __name__ == "__main__":
    unittest.main()

