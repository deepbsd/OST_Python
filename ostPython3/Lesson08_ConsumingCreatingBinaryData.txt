Lesson 8: Consuming and Creating Binary Data

Project

Filename(s): wiretimes.py  wireshark.bin

Create a Python3_Homework08 project and assign it to your Python3_Homework
working set. In the Python3_Homework08/src folder, create a program named
wiretimes.py that reads the wireshark.bin data file dumped from the wireshark
program (to get it, right-click the link
http://courses.oreillyschool.com/Python3/software/wireshark.bin, select Save
Target As, and save the file to your Python3_Homework08/src folder.). The file
begins with a header:

Wireshark file header:
 guint32 magic_number; /* magic number */
   guint16 version_major; /* major version number */
   guint16 version_minor; /* minor version number */
   gint32 thiszone; /* GMT to local correction */
   guint32 sigfigs; /* accuracy of timestamps */
   guint32 snaplen; /* max length of captured packets, in octets */
   guint32 network; /* data link type */

Each packet is then preceded by a four-entry header:
   guint32 ts_sec; /* timestamp seconds */
   guint32 ts_usec; /* timestamp microseconds */
   guint32 incl_len; /* number of octets of packet saved in file */
   guint32 orig_len; /* actual length of packet */

For more detailed information about the wireshark dump file format, see
http://wiki.wireshark.org/Development/LibpcapFileFormat.

Print the timestamp for each packet in seconds and microseconds.

Submit wiretimes.py when it is working to your satisfaction.


===============
Feedback from 
Instructor
===============

Overall Comments:
Excellent.

It's the only one quite like it.  :-D

Another solution:

import struct

filename = "wireshark.bin"

f = open (filename,"rb")
f.read(24)
cnt = 1
while f:
  pack_header = f.read(16)
  if not pack_header:
      break
  (ts_sec, ts_usec, incl_len, orig_len) = struct.unpack('=LLLL', pack_header)  # unpacking assignment
  f.read(incl_len)
  print("Packet {0}: Time in [sec]={1}, + [msec]={2}".format(cnt,ts_sec,ts_usec)) 
  cnt +=1

-Kirby

======
QUIZ 1
======
Q1: Name at least two differences between ASCII and Unicode.

Unicode enables encoding of many larger character sets, with the ultimate goal
of being able to represent any text at all.  The ASCII character set is just
one character set consisting of 256 characters, common in Western Europe and
the US.  UTF-8, which we use in Python here, is one encoding similar to ASCII,
since it includes characters commonly used in the Western world.  Python also
supports support for many other encodings.

ASCII uses one byte to represent each character, while UTF-8 represents each
character as one-to-four bytes.

Q2: What module does Python use to interact with binary data?

The struct module is a very common module for packing and unpacking binary
data into human readable data.

Q3: What do the pack() and unpack() methods of the struct module do?

To the computing machine, data is represented in a binary format which is not
comprehensible to regular human beings, but in that format it is easily stored
and manipulated in digital busses and devices by machines.  So that humans can
relate to this data more easily, binary data must be translated into more
human-readable form, such as in UTF-8 encoding in say, English or in
Python.  struct.pack() and struct.unpack() perform this translation of
binary data into human-readable data, or from human-readable form into
lower-level machine-readable form.

