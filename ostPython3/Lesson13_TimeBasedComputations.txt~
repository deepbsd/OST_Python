

Lesson 13: Time-Based Computations

Project:

Filename(s): math_quiz.py  test_math_quiz.py

Create a Python3_Homework13 project and assign it to your Python3_Homework
working set.  In the Python3_Homework13/src folder, create a program named
mathquiz.py. In this program, you will create a math quiz. This quiz will ask
the user five addition questions adding random integers between 1 and 10
inclusive. Each answer will be timed so you can generate the following time
results:

*Time for each question
*Total time for all questions
*Average time per question

This program needs to generate random numbers using Python's random library.

Your project should meet the following conditions:

You must include a working test_mathquiz.py unittest file that tests at least
one function. 

Each time the test runs, it must present random integers.

Your code must generate output that looks like this:
What is the sum of 6 and 6? 12
12 is right!
What is the sum of 5 and 4? 9
9 is right!
What is the sum of 4 and 2? 6
6 is right!
What is the sum of 1 and 1? 2
2 is right!
What is the sum of 9 and 2? 111
111 is wrong!
Question #1 took about 1 seconds to complete and was right.
Question #2 took about 1 seconds to complete and was right.
Question #3 took about 1 seconds to complete and was right.
Question #4 took about 2 seconds to complete and was right.
Question #5 took about 2 seconds to complete and was wrong.
You took 9 seconds to finish the quiz
Your average time was 1.8 seconds per question

Submit mathquiz.py and test_mathquiz.py when your programs are working to your
satisfaction.


======
QUIZ 1
======

Q1: What are Python's standard library time-handling modules?

datetime, time and calendar.  (Never have used calendar yet...)

Q2: Which date system does the astronomy community use to track time?

Julian date (JD) system

Q3: What is the difference between the strptime() and strftime() methods?

datetime.strftime() formats an existing date object as a string.

datetime.strptime() takes a formatted string (not a date object) and creates
new date object from that string.

Q4: What is a timedelta?

a timedelta is a dateobject of a specified duration, measured in years,
months, weeks, days, or seconds (or even microseconds).  This object is handy
when doing calculations with other time objects.  I use one in testing the
time_it() function of my project.  I add a known timedelta to a start time,
and if the time_it() function returns the same value as the timedelta, the
function passes the test.


======
QUIZ 2
======

Q1: What is the best way to validate a string that is supposed to represent a
date?

datetime.strptime() 

It will throw a ValueError exception for bad data inputs.

Q2: Using datetime.datetime, how do I construct a datetime object for
'07-24-1985 2:00 AM'?

formatter_str = "%m-%d-%Y %I:%M %p"
datetime.strptime("07-24-1985 2:00 AM", formatter_str)

Q3: If my_date is the name of my datetime object, how do I get its hour?

my_date.hour


