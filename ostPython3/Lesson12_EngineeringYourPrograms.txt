Lesson 12 Engineering Your Programs

Project

Filename(s):  property_address.py test_property_address.py
property_address.log homework12.log


Create a Python3_Homework12 project and assign it to your Python3_Homework
working set. In the Python3_Homework12/src folder, copy property_address.py
and test_property_address.py from the last project. Modify property_address.py
to accept the following options if called directly, with the five address
values used to instantiate an Address class if no parser errors are thrown.


option       	default				address?		task

-l/--level	INFO				yes	Sets the log level to DEBUG, INFO, WARNING, ERROR, and CRITICAL 
-n/--name 	Throws a parser error if empty 	yes 	Sets the name value of the Address object 
-a/--address 	Throws a parser error if empty 	yes 	Sets the street_address value of the Address object 
-c/--city 	Throws a parser error if empty 	yes 	Sets the city value of the Address object 
-s/--state 	Throws a parser error if empty 	yes 	Sets the state value of the Address object 
-z/--zip_code 	Throws a parser error if empty 	yes 	Sets the zip_code value of the Address object 

If you run your code with the following command-line arguments:

property_address.py -n Tom -a "my street" -c "San Diego" -s "CA" -z 21045

...you should see something like this in property_address.log:


2010-10-11 14:48:59,794 - INFO - __init__ - Creating a new address

Note: When you use the ${string_prompt} or direct input option in the Eclipse run configuration, 
you can't use single quotes ('). If your input requires quotes, use double quotes ("), so the full 
string is parsed rather than breaking at white space. If you run your code without command-line arguments, 
you should see:

Usage: property_address.py [options]
    
property_address.py: error: options -n, -a, -c, -s, -z are required

If you run your code with the following command-line arguments:

property_address.py -l WARNING -n Tom -a "my street" -c "San Diego" -s "CA" -z "EZ 123"

...you should see:

usage: property_address.py [options]

property_address.py: error: option -z requires a valid 5-digit US zip code

...AND you should see something like this in property_address.log:

2010-10-11 17:10:32,702 - ERROR - ZipCodeError - ZIPCODE exception

Note: Your date and time values will vary.

Now, modify your propertyaddress.py program to use the configparser library to load the settings from the 
following property_address.cfg config file:

[log]
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
output = homework12.log

[validators]
zip_code = \d{5}\-\d{4}$
state = [A-Z]{3}$

As you can see, the log formatting, log output, and Address validators are different from what you currently have.

Your project must meet the following conditions:

The tests in test_property_address.py must run correctly. Also, the results of your logfile should appear as below:

2010-10-11 17:34:38,968 - root - ERROR - STATE exception
2010-10-11 17:34:39,098 - root - ERROR - ZIPCODE exception
2010-10-11 17:34:39,112 - root - INFO - Creating a new address
2010-10-11 17:34:39,113 - root - ERROR - NAME exception
2010-10-11 17:34:39,113 - root - INFO - Creating a new address
2010-10-11 17:34:39,113 - root - INFO - Creating a new address 

Note: Your date and time values will vary.





Submit property_address.py, test_property_address.py, and property_address.cfg when they are working to your satisfaction.


===================
Project Feedback
===================

Again, the testing does not care about argparse or optparse in any way.  Delete everything after 
if __name__ == "__main__" in property_address.py and forget about command line parsing, we
no longer care. :-D


    @state.getter
    def state(self):
        if re.match('[A-Z]{2}$', self._state):  # <--- should be coming from configparser  -- read from file, not hardcoded, ditto zip.
            return self._state
        else:
            raise StateError('Must have only 2 capital letters')  

The validators need to come from the .cfg file, the patterns there.  You have them hard coded.

Once you use 5-4 for zips and 3-letters for states from the config file, your tests will need to change.

Again, I recommend deleting all code after if __name__ == "__main__":  You're focusing on command line parsing and that's holding you back.

-Kirby
Grade:

Try Again

Your instructor would like you to work on this project. Be sure to hand in your corrections!


=======
QUIZ 1
=======
Q1: Which techniques can be used to receive input from the command line?

sys.argv  optparse and argparse.  Optparse is decprecated.

Q2: If parser = OptionParser(), how do you add more options?

I used argparse but optionparse is very similar:

parser.add_option("-l", "--loglevel",
                 action="store",
		 dest="level",
		 default="debug",
		 help="set logger level: debug, info, warning (default), error, crittical")

Q3: How do you call for help using optparse?

run the program with the -h argument

Q4: Does the program run normally when you call for help as in the last
answer?

No.  The program just produces the help message.

Q5: How do you create a parser error?

It all depends on how you set up your options.  A parser.error() is called
if the program is invoked without obeying your option rules.  For instance,
if certain options are required but not given, a parser.error() is raised.  
If two mutually exclusive arguments are given on the command line, a
parser.error() is given.  If a bad value for an option is given (as evaluated
by a type=int [or whatever] spec in your add_option statement), then a
parser.error() is raised.  

=======
QUIZ 2
=======

Q1: What is the name of Python's configuration file library?

configparser


Q2: What are some advantages that the INI format has over XML or JSON?

It's easy for both humans and machines to read and process.

Q3: How do you comment out a line of an INI file?

# commented line

Q4: What extension should you use for your setting files? What extensions
should you not use?

We used *.cfg in the lesson and the exercise.  Apparently we can use *.INI as
well, probably more for Windows apps.   *.conf or *.cfg sounds good in a POSIX 
environment.  I would expect that using a reserved suffix would be a bad 
idea.  For example, calling a config file whatever.jpg would probably be dumb.




