Lesson 7:  Python's Object Oriented Features  

PROJECT

Filename(s):  furnishings.py test_furnishings.py

Create a Python3_Homework07 project and assign it to your Python3_Homework
working set. In the Python3_Homework07/src folder, create a program named
furnishings.py that includes a Furnishing class. During instantiation, this
class should ask for a "room" argument. Then, create the following classes
that inherit from the Furnishing class: Sofa, Bookshelf, Bed, and Table.

Use the built-in list type to record the furniture in your own home that
matches the classes above. So for example, you might have:
>>> from furnishings import * 
>>> home = [] 
>>> home.append(Bed('Bedroom'))
>>> home.append(Sofa('Living Room'))

Now, write a map_the_home() function to convert that to a built-in dict type
where the rooms are the individual keys and the associated value is the list
of furniture for that room. If we ran that code against what we display in our
command line, we might see:

>>> map_the_home(home)
{'Bedroom': [<furnishings.Bed object at 0x39f3b0>], 'Living Room':
[<furnishings.Sofa object at 0x39f3b0>]}

Also write a counter() function that prints the types of furniture and how
many there are of each type. The results, based on our example:
>>> counter(home)
Beds: 1
Bookshelves: 0
Sofas: 1
Tables: 0

Your project should meet the following conditions:

oThe program should be able to produce the same results as the list above.

oYou should include a test_furnishings.py program that tests the
map_the_home() function.

Submit furnishings.py and test_furnishings.py when they are working to your
satisfaction.


QUIZ 1
Q1:  What are the three commonly held fundamental concepts of object-oriented
programming?

Encapsulation: This is the idea that the only way to access or change the data
inside an opject is by calling its methods.  The Python community, however, 
considers it acceptable to both read and set an objects attributes from
anywhere in a program.  

Inheritance: This is the idea that a Child class inherits attributes and
methods from its Parent class.  A child class can inherit from multiple parent
classes, but in doing so, the child class follows a specific order, called the
Method Resolution Order (MRO).

Polymorphism: Python supports very well the concept of Subtype Polymorphism,
which is called just 'Polymorphism' in less formal contexts.  This principle
allows a programmer to write code without so much regard to the Types of the
data that code is dealing with.  The lesson explained how both strings and
integer are 'polymorphic' with regard to addition, because the '+' operator 
would 'do the right thing' with each type of data.  

Q2:  What is inheritance?

It means that a Child class inherits methods and attributes from one or more
Parent classes according to a defined MRO or method resolution order.  In this
and in previous lessons, 'CODE TO TYPE' examples were given for hair color and
for skin color.  The student could predict the Child class value from the MRO
of the Parent class or classes.  

Q3:  Encapsulation is the idea that the only way to access or change the data
inside an object is by calling its methods; what is Python's take on it?

It's okay to access or change an object's data from anywhere in a program.

Q4:  What is the method resolution order for class Puppy(Dog, Young,
Untrained)? 

The subclass Puppy inherits first from baseclass Dog, then from Young, and
then from Untrained.  When attributes and methods are being resolved, Parent
classes will be searched in this order.

QUIZ 2

Q1:  In Left + Right, which object is having its '+' or __add__ method called? 

If the left object supports a.__add__(b), then that method is used.  If this
is not possible (because, say, the a object has not __add__() method, or if
__add__() is not implemented), then the interpreter attempts b.__add__(a).  If
this is impossible, the interpreter raises TypeError exception.

Q2:  If the Broccoli class presents the same API as Cauliflower, in
programming terms, what is that called?

Broccoli and Cauliflower are cubclassing from the same base class.  I think
this is what is being asked for...


Q3:  What do you call a method in a base class designed to remind the
developer to extend it to be a real method?

An abstract method.  An example is if a parent class method contains something
like this for one if its methods:

raise NotImplementedError("Reminder goes here...")

Subclasses will probably need to implement this method in their
instantiations.  A Duck(Animal) class would need to implement the sound method
when instantiating Duck() rather than inheriting from Animal, since animals
all seem to want to make their own unique sounds anyway.


Q4:  If you want to extend a method instead of overriding it, what Python
built-in do you use?

The super() function.  This will use the superclass's method as part of
implementing its own method.


