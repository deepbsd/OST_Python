Lesson 5: Persistent Storage

Project:

Filename(s): HS_tester.py, high_score.py, testfile1.shlf.dat, testfile1.shlf.dir

Write a function (not a class) that takes two arguments, a string player name
and an integer score, and keeps a "high score" table in a Python shelve. If
the integer argument is higher than the given player's current high score (or
if the player has no recorded high score), log the value as this player's new
high score. The function should return the player's current high score.
Remember, a function is not the same thing as a class and it's a function
that's needed.

Again, write a separate test module that verifies the operation of the
function.

===========================
Mentor Feedback on Project:
===========================

=====  First Attempt Feedback:

Overall Comments:
Hi David,

You're off to a great start here. I have to turn this back, however, because the project specifications require the function take only 2 arguments. It's currently set up to take 3. How do you get around the conundrum of letting the main app know where to put the shelve? The answer lies in separation of duties.

You don't want do actual file operations in the test suite.  Think of this as a circus with the main routine playing the juggler and the test routine serving as the stage crew.  setUp() can sweep the stage, give it a fresh coat of paint, create directories, etc.  Then, as the performer takes center ring, the tests can throw bowling pins to juggler.   All of the performance (file opening, closing, etc.) should take place in the center ring, blissfully agnostic about whatever's happening back stage.

In fact, the test suite doesn't even have to know the name of the shelve file. Much better to keep it agnostic, or else you are setting yourself up for a maintenance nightmare in the future.

You have an excellent range of tests.  These tests look more difficult than necessary to write and easy to make mistakes with.  If you cast them in this form:

def test_somthing(self):
    name, score, exp = ("Bree", 50, 50)
    observed = high_score(name, score)
    self.assertEqual(observed, exp, 
                     "I'm looking for: " + str(exp) + 
                     " but got:  " + str(observed))

... you're automatically populating the test and the error message with the data.  Not so important for one test but what about the second?  

In this format, it's easy to recycle code:

def test_somthing_else(self):
    name, score, exp = ("Bree", 40, 50)
    #recycled code
    self.assertEqual(observed, exp, 
                     "I'm looking for: " + str(exp) + 
                     " but got:  " + str(observed)) 

.... and it's not too tough to extend it to run any number of tests with very little typing/debugging:

def test_a_bunch(self):
    name_score_exp = [('Bree', 50, 50),  #new score
                      ('Bree', 60, 60),  #higher score
                      ('Bree', -10, 60), #lower score
                      ('Fred', 0, 0)    #new score for new player
                      ]
    
    for name, score, exp in name_score_exp:
        self.assertEqual(observed, exp, 
                         "I'm looking for: " + str(exp) + 
                         " but got:  " + str(observed)) 

Also, you should strive for keeping everything is local as possible. Unless you can make an affirmative case for putting a variable where it is global to the module, or even as a class instance level ("self.") object, don't do it. If you can define everything that you need (here, for instance, the test scores in names) right in the test methods, you eliminate the possibility that they could be inadvertently changed from within another method or from elsewhere in your application. Another advantage: everything you need to understand test is available at a glance - no scrolling back and forth between the method in setUp().

This is looking really good.

Best,

-Pat


Grade:

Try Again

Your instructor would like you to work on this project. Be sure to hand in your corrections!


============================
Mentor Feedback 2nd Attempt:
============================

Overall Comments:
Hi David,

This looks much better. Your project definitely passes.

Your testing, however could be made one heck of a lot easier by combining all the individual tests within a single method in finding a clever way to incorporate specific data into a generic template. You can ask yourself whether it would be easier to write, maintain, or review 6 individual test methods or something like this:

    def testStoreHighScore(self):

        self.assertEqual(-100, HighScore('joe', -100))
        self.assertGreater(-99, HighScore('joe', -100))
        self.assertEqual(0, HighScore('joe', 0))
        self.assertLess(0, HighScore('chris', 100))
        self.assertEqual(1000, HighScore('chris', 1000))
        self.assertLess(100, HighScore('chris', 1000))
 
Overall, good work.       

-Pat
Grade:

Great


========
QUIZ 1:
========


Quiz Q1:
What does the statement pickle.dump(o, f) do?

dumps the contents of 'o' into the file 'f' in binary format

Q2:
Should pickle files be opened in text or binary mode?

binary

======== Mentor Comments on Question 2:

From the Python documentation:

Be sure to always open pickle files created with protocols >= 1 in binary mode. For the 
old ASCII-based pickle protocol 0 you can use either text mode or binary mode as long as 
you stay consistent.

A pickle file written with protocol 0 in binary mode will contain lone linefeeds as 
line terminators and therefore will look â??funnyâ?? when viewed in Notepad or other 
editors which do not support this format.


Q3:
What type of key values does the shelve module require you to use?

string

================ Mentor Feedback on Question 3:

... or something encodable as a string.

==========================
Mentor Feedback on Quiz 1:
==========================

Overall Comments:
Hi David,

This is awesome. Please see the comments.

-Pat
Grade:

Great


=======
Quiz 2
=======

Q1:
What argument to shelve.open() will activate in-memory caching?

whatever = shelve.open(r'path_to_filename', writeback=True)

========  Mentor Feedback on Question 1:

Shelves do not track modifications to volatile objects, by default.  So if contents 
of an item stored in the shelf are changed, the shelf must be updated explicitly by 
storing the entire item again.  To automatically catch changes stored in a shelf, 
enable the writeback flag.  Setting this flag to True causes the shelf to remember 
all objects retrieved from the database using an in-memory cache.  Each cache object 
will be written back to the database when the shelf is closed.  This will reduce 
errors and make object persistence more transparent, but it could impose a performance 
penalty since the cache consumes extra memory while the shelf is open and pausing to 
write objects back to database.


Q2:
What persistent format would you recommend if the data must be read by
JavaScript as well as Python programs?

JSON

=============  Mentor Feedback on Question 2:

If we want a human readable, cross-platform and cross-language serialization format, 
we can use JSON. JSON is actually a subset of JavaScript's object literal syntax. Although 
it was derived from JavaScript, json parsers exist for many languages. In fact, Python 3 
comes with a built-in JSON parser.
JSON (JavaScript Object Notation), specified by RFC 4627, is a lightweight data interchange 
format based on a subset of JavaScript syntax.  It is a text format that is completely 
language independent but uses conventions that are familiar to programmers of the C-family of 
languages (C, C++, C#, Java, Perl, Python) 

The json module provides an API similiar to pickle for converting in-memory Python objects to 
a serialzed representation known as JSON.  Unlike pickle, JSON has the benfit of being implemented 
in many languages.  It is most widely used for communicating between the web server and the client . 

JSON has become an important protocol / format with the advent of AJAX i.e. web pages that update 
without needing to be reloaded (example gmail).  Python typically resides on the server and talks to 
JavaScript browsers.  The primitive data types are communicable in both directions thanks to JSON.

XML is another client-server transmission format understood across languages.  We should remember 
that HTML itself is close to an XML and may be served in strict XML format as a mimetype.
http://html5doctor.com/html-5-xml-xhtml-5/


Q3:
What expression will serialize object x as an equivalent JSON string?

json.dumps(x)

==================
Overall Comments :
==================

Overall Comments:

Terrific work, David. Please have a look at the comments.

-Pat
Grade:

Great


