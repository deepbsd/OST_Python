Lesson 10:  Handling Databases

Project: 

Filename(s):  checkfoods.py database.py

Populate your database with "animal" and "food" tables using the tablepop and
addfood programs that you wrote during the lesson (this step will not be
necessary if you have not modified the tables since you created them in the
lesson).

Write a program that verifies that every animal eats at least one food.

======= Mentor Feedback on Project:

Hi David,

This looks like it would work well, but when I added a new animal without any food:

cursor.execute("""INSERT INTO animal (id, name, family, weight)
                    VALUES (%s, %s, %s, %s)""", (1000, 'Peaches', 'Porcupine', 50))
db.commit()

I got no report that Peaches the Porcupine was hungry.

As long as you going to revisit this, here's something to think about:

Best practice here would be to create test database tables right in your testing module. 
That way a reviewer, teammate, mentor etc. could easily see what was supposed to be in the 
database (both in terms of the database schema in the table contents). You could, for 
example create them in setUp() and delete them in tearDown().

In terms of understanding what's going on, this is okay for me, right now, because I have 
prior knowledge of all these things and know what to expect. But it would be unusual for a 
new member of your team to have that knowledge, so this imposes something of a learning curve.

For me to test this I had to add an animal. Were this a production database, I would have 
had to remove it.  That adds up to a pretty big 'ask' of your teammates.

You're off to a great start.


-Pat
Grade:

Try Again

=====  Mentor Feedback to Second Attempt:

Overall Comments:
Hi David,

Thanks a lot for taking another look at this. I was gratified to learn that Peaches the 
Porcupine now has her problems reported to the proper authorities. It's off to the porcupine 
supply store for me. Also, you might find an extra Aardvark in your zoo  - I hope you don't mind :-)

For your inspection, here is an alternative solution that employs a unittest approach:

"""
Create the food table and add all necessary data.
Note that the foods are identified by the animal's
name and family, so we have to look up the primary key.
"""

import mysql.connector
from database import login_info
import unittest

class TestDb(unittest.TestCase):
    def setUp(self):
        self.db = mysql.connector.Connect(**login_info)
        self.cursor = self.db.cursor()
    
    def testAnimalEatsFood(self):
        self.cursor.execute("SELECT id FROM animal")
        animal_ids = set()
        for tp in self.cursor.fetchall():
            animal_ids.add(tp[0])
        self.cursor.execute("SELECT DISTINCT(anid) FROM food")
        fed_animals = set()
        for tp in self.cursor.fetchall():
            fed_animals.add(tp[0])
        self.assertEqual(animal_ids, fed_animals)
    
    def tearDown(self):
        self.db.close()

if __name__ == '__main__':
    unittest.main()


-Pat
Grade:

Great





###########  QUIZ 1

Q1: What does "SQL" stand for?

Structured Query Language

Q2: What specifies how Python database drivers should interact with programs
that use them?

The Pythone Database API

======== Mentor Comments:  
Mentor Comments:
Yep.  The cool kids usually just say "DBAPI".


Q3: Which SQL statement would you use to add a new table to a database?

Here's an example...

mysql> CREATE TABLE TableName(
-> FieldName CHAR(15) NOT NULL,   # How many characters, must not be null
-> NextFieldName VARIABLECHAR(30) NOT NULL, # Up to 30 characters, No Null
-> NextFieldName INT,  # Integer value
-> NextFieldName INT); # Another integer.  ends with paren semi-colon.

each line prior ends with comma.  This is just a sample.


Q4: What does the ALTER TABLE statement do?

Make a change to the Table

========= Mentor Comments:

http://www.postgresql.org/docs/9.1/static/sql-altertable.html

worth a peek to see how many bells and whistles you get (this is
using PostgreSQL, the best open source database probably,
but MySQL / MariaDB is similar).

============ Overall Mentor Comments for Quiz 1:

Overall Comments:
Good job here, David. Please have a look at the comments on Q4.

-Pat
Grade:

Great


############## QUIZ 2

Q1: In a SELECT statement, how do you retrieve all columns?

SELECT * FROM DBaseName;

Q2: How do you indicate that no data is available for a particular column and
a given row?

Special value called: NULL


Q3: Write a statement that retrieves the total number of rows from a table
named "user."

SELECT COUNT(*) FROM user;

==========  Overall Mentor Comments:

Terrific work here, David!

-Pat
Grade:

Great
