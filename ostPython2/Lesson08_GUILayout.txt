
Lesson 8: Graphical User Interface Layout 

Filename(s):  tkpframes.py (tkgframes.py is included as an alternate solution)

Project: GUI Layout

Write a GUI-based program to build a window layout as shown below. When the
frame is resized, the buttons should stay the same height and expand sideways.
Frame 1 and Frame 2 should always be the same height and width as each other,
and Frame 3 should be half as wide again as they are (i.e. 150% wider, as
shown below).  Labeling each Frame is optional / good exercise.
+---------------------+--------------------------------+
|                     |                                |
|                     |                                |
|                     |                                |
|      Frame 1        |                                |
|                     |                                |
|                     |                                |
|                     |                                |
+---------------------+               Frame 3          |
|                     |                                |
|                     |                                |
|                     |                                |
|     Frame 2         |                                |
|                     |                                |
|                     |                                |
+----------+----------+----------+----------+----------+
| Button 1 | Button 2 | Button 3 | Button 4 | Button 5 |
+----------+----------+----------+----------+----------+


############  Mentor Feedback:

Hi David,

Good job on this project which focuses mostly on layout. Especially nice job finding a 
way to customize the top label, and super-especially good taste in your choice of the label to use ;-)

For the next project, I think you'll find that you'll need to use Frame objects instead of Label 
objects (at least for Frame 3: paren because Frame objects are containers whereas Label objects are not.

It's actually fine to use a pack and grid manager together as long as they aren't put in control of the 
same widgets.  So packing a Label into a Frame that was stretched to a grid is straightforward.  

In the next project, I recommend with experimenting with a pack manager for placement of widgets in 
Frame3. Those widgets would be Entry and Text widgets respectively. The first should stay thin and 
trim across the bottom or top while the Text object should balloon to fill the rest of the frame, 
no real estate wasted.


-Pat
Grade:

Great






Quiz 1
======

Q1: Using the pack geometry manager, how would you ensure that widget W
occupies the full width and height of its containing element?

W.pack(side=TOP, fill=BOTH, expand=True)


Q2: What are the two most commonly used geometry managers in Tkinter?

pack() and grid().   Place() apparently has insufficient documentation 


Q3: When using grid layout, which argument to grid can you use to cause the
cell content to align with one or more sides of the cell?

object.grid(sticky=N) to align with the top, for example.  You can set a
variable equal to N+S+E+W and then use that variable.  

ALL=N+S+E+W
object.grid(sticky=ALL) 

And this can align all sides of the cell and expand in all directions.

=============== Mentor Feedback on Q3:

Mentor Comments:
From the docs:

sticky=  Defines how to expand a child widget if the resulting pane is larger 
than the widget itself. This can be any combination of the constants S, N, E, 
and W, or NW, NE, SW, and SE. 

=============== Mentor Feedback on Quiz 1:

Overall Comments:
This is awesome, David.

-Pat
Grade:

Great


=======
Quiz 2
=======

NOTE:  This quiz took me three attempts to get right...

Q1: Which widget would you normally use to display a short piece of static
text?

Label()

Q2: How would you configure frame F in a grid layout to occupy three rows and
two columns starting at row 3, column 2?

====  Answer 1:
F.grid(row=2, column=1)

==== Mentor Feedback:
This needs just a little bit more - you'll need for parameters to perfect this 
specification.  If you look closely at the question wording, it asks for the 
layout to start it row 3, but your partial specification would have it starting 
it row 2. (Note that it says "row 3", not "the 3rd row").

==== Answer 2:

F.grid(row=2, column=1, rowspan=3, columnspan=2)

oops.  :-\

===== Mentor Feedback for Answer 2:

Getting closer. Now if you can get it to start it row 3, column 2 it would be perfect.

====== Answer 3:

Oh, ok.  So we're not talking about the third row, second column.  If we're talking about 
"row 3" and "column 2", which are the fourth and third, respectively, then it's:

F.grid(row=3, column=2, rowspan=3, columnspan=2)

======= Mentor Feedback for Answer 3:

Yay!


Q3: Do the row and column numbers used with the grid layout manager need to be
contiguous?

No.  Grid() figures it out.


===== Mentor Feedback:

You could have a 3-by-3 tic-tac-toe like grid with rows 1, 11, 111 and columns 
10, 20 ,30 and all could be well in terms of no space wasted.  This design allows 
you to "rough in" your GUI then fill in details later without having to renumber 
rows and columns.

===== Overall Mentor Feedback for Attempt 1:

Hi David,

This is really good so far, but Q2 needs just a little more content. Would you be 
willing to have another look?

-Pat
Grade:

Try Again

Your instructor would like you to work on this quiz. Be sure to hand in your corrections!

====== Overall Mentor Feedback for Attempt 2:

Overall Comments:
This is almost correct, David. I think one more try ought to do it. (Note that were asking 
for row 3, not the 3rd row and column 2, not the 2nd column)

-Pat
Grade:

Try Again

Your instructor would like you to work on this quiz. Be sure to hand in your corrections!


===== Overall Mentor Feedback for Attempt 3:

Overall Comments:
Yep you got it now David. Thanks for hanging in there.

-Pat
Grade:

Great

