Starting with the project you created at the end of the last lesson, add
components to the existing framework so that:
oWhen an area occupied by Frame 1 or Frame 2 is clicked with mouse button 1,
the program should print which frame was clicked and the X and Y coordinates
(relative to the Frame).
oFrame 3 should contain an Entry and a Text widget. When the button now
labeled "Open" is clicked, the content of the Entry should be used as a file
name, and the content of the file (if any) displayed in the Text widget.
oThe Entry and Text widgets should completely fill Frame 3 and continue to do
so even as the application window is resized.
oThe color of the text displayed in Frame 3's Text widget should change
appropriately when the "Red," "Blue," "Green," or "Black" buttons are clicked.

+---------------------+--------------------------------+
|                     |                                |
|                     |                                |
|                     |                                |
|      Frame 1        |                                |
|                     |                                |
|                     |                                |
|                     |                                |
+---------------------+               Frame 3          |
|                     |                                |
|                     |                                |
|                     |                                |
|     Frame 2         |                                |
|                     |                                |
|                     |                                |
+----------+----------+----------+----------+----------+
|    Red   |   Blue   |  Green   |  Black   |   Open   |
+----------+----------+----------+----------+----------+




QUIZ 1:

Q1: What method of the Tkinter root object do you call to activate the GUI?

root.mainloop()


Q2: When an event handler is bound to an event using the bind() method, how is
the event data passed to the handler?

The "event object" contains information about the event that has been bound to
a handler.  That object contains information about the event, such as in which
widget the event occurred, the cursor position where the mouse event occurred,
relative to both the root window and the widget.  Character codes for keyboard
events are also included.  Some more info is also available.

Q3: What event would you bind to a widget in order to be able to detect all
keystrokes?

An example was included in the text:

frame.bind("<Key>", handler)

The "handler" method printed the contents of 'event.char', 'len(event.char)',
and 'event.keycode'.  This worked for any keystroke on my keyboard, but
sometimes the value of 'event.char' was empty, and the len(event.char) value
was 0.


Q4: What value does an event handler need to return to stop the event from
propagating to widgets further up the hierarchy?
filemenu.add_command(label="Open", command=self.f)

"break"


QUIZ 2:

Q1: How do you add a menu bar to a Tkinter root window?

menu = Menu(root)
root.config(menu=menu)

Q2: How do you add a file menu to the menu bar?

filemenu = Menu(menu)
menu.add_cascade(label="File", menu=filemenu)

I would modify it:  

filemenu = Menu(menu, tearoff=False)

Q3: How do you add an "Open" command to the file menu that calls function f
when the command is selected by the user?

filemenu.add_command(label="Open", command=self.f)


################################################
###############################################
##  PAT'S COMMENTS FROM LESSON 8 PROJECT
################################################

Hi David,

Good job on this project which focuses mostly on layout. Especially nice job
finding a way to customize the top label, and super-especially good taste in
your choice of the label to use ;-)

For the next project, I think you'll find that you'll need to use Frame
objects instead of Label objects (at least for Frame 3: paren because Frame
objects are containers whereas Label objects are not.

It's actually fine to use a pack and grid manager together as long as they
aren't put in control of the same widgets.  So packing a Label into a Frame
that was stretched to a grid is straightforward.  

In the next project, I recommend with experimenting with a pack manager for
placement of widgets in Frame3. Those widgets would be Entry and Text widgets
respectively. The first should stay thin and trim across the bottom or top
while the Text object should balloon to fill the rest of the frame, no real
estate wasted.


-Pat
