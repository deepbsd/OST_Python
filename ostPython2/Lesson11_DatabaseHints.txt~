Lesson 11:  Database Hints and Tricks

Project:


Filename(s): classFactory.py database.py testClassFactory.py


Modify the classFactory.py source code so that the DataRow class returned by
the build_row function has another method:

retrieve(self, curs, condition=None)

self is (as usual) the instance whose method is being called, curs is a
database cursor on an existing database connection, and condition (if present)
is a string of condition(s) which must be true of all received rows.

The retrieve method should be a generator, yielding successive rows of the
result set until it is completely exhausted. Each row should be a next object
of type DataRow.

######  TEACHER COMMENTS on COMPLETED PROJECT ##################

Hi David,

You've ended up producing a masterful project. Great job. Here's a little more
background.

It makes intuitive sense that a DataRow, customized by build_row to work  with
a specific table, would have enough information to implement .retrieve() at
the class level, meaning no need for an instance method with self as a
leftmost argument.

The project does not ask for a class level implementation primarily because
all our work with classes so far has been with methods expecting to access
instance-level attributes through self.__dict__.

In Python3 we begin to explore "decorator syntax", a syntactic sugar or
shorthand that will enable both class and static methods to be defined quite
simply.

@classmethod
def retrieve(cls, curs, condition=None"):

... would in that case have cls automatically set to the class and the body of
retrieve would no longer refer to a self, but to cls.table instead.  There
would no longer be any need to intialize a DataRow with actual row data,
before  calling its retrieve method.  Class-level methods are "selfless".

Static methods are even more aloof or detached from their surrounding class in
having no parameters other than those matching explicitly passed  arguments.
No implicit binding of the class or self occurs in static method calls.

These comments preview upcoming concepts so don't worry if the details still
seem a bit hazy.

As with the last project, it would have been best practice here to build a
test database within the test suite so even a first time user could verify
that the tests make sense and are providing the right information. You would
want to do this for a project in the "real world"

For here and now, this is just fine. Nice work.

-Pat
Grade:

Great

################################################################

QUIZ 1

Q1:  What methods are available to retrieve data from a database cursor after
it has been used to execute a SQL SELECT statement?

cursor.fetchone()
cursor.fetchmany()
cursor.fetchall()

====== Mentor Comments:

Note that fetchmany() requires an integer for argument.


Q2: What method do you need to implement to control an object's printable
representation?

format

Ideally, you can represent data tables as a class and represent a row with the
__repr__ method of the class, much like a format statement.  But short of
using a class to represent a table, format will work.  For example:

fmt = "{0:10} {1:6} {2:10}"
print(fmt.format("Animal", Weight", "Family"))
print("="*30)
cursor.execute("SELECT name, weight, family FROM animal")
for name, weight, family in cursor.fetchall():
    print(fmt.format(name, weight, family))

This will print a fairly readable version of the animal table.

======  Mentor Comments:

You got the idea here. Actually, this question was after the more general case of 
how you would get a printable representation of *any* object.

__repr__() is right, although if __str__ is present then print(n) will go for that. 
Here's a quick example:


class Foo:

    def __init__(self, n):
        self.name = n

    def __repr__(self):
        return "".format(id(self))

    def __str__(self):
        return "".format(self.name)


obj = Foo("Hercules")
print(obj.__repr__())
print(obj)
print([obj])

OUTPUT:



[]



Q3: Write an expression that produces a comma-separated representation of the
elements in a list named lst.

If lst = ["monkey","parrot","penguin","tiger","bear"], the result of the
expression would be 'monkey, parrot, penguin, tiger, bear'.

The number of elements is not fixed, however.

", ".join(lst)

if you didn't want the commas, you could go

print(*lst)


============= Overall Mentor Comments on Quiz 1:

Hi David,

You have got some really terrific answers here. Nicely done.

Please take a look at these comments for some clarifications.

Best,

-Pat
Grade:

Great



#########################  QUIZ 2

Q1: Write an expression that takes two lists of equal length, k and v, and
produces a dict where the keys are the elements of k and the corresponding
values are the elements of v.

mydict = dict(zip(k, v))

============= Mentor Feedback:

Showing how zip() may take multiple (more than two) iterables:

>>> starters = ["soup", "salad", "bread", "bread sticks"]
>>> entres = ['spaghetti', 'pizza', 'hamburger']
>>> desserts = ['ice cream', 'pie','cake']
>>> tuple(zip(starters, entres, desserts))
(('soup', 'spaghetti', 'ice cream'), ('salad', 'pizza', 'pie'), ('bread', 'hamburger', 'cake'))


Q2: What function of the mysql.connector module must you call to establish a
connection with a database?

Connect method, as in

mysql.connector.Connect(**login_info)

where login_info is a key_value variable with login information to be used.
(in the text, login_info is imported from a module)

Q3: If the built-in zip() function is given two lists of unequal length as
arguments, what is the result?

The length of the zip file is the length of the shorter file.

Example:  
list1 = ['Director', 'VP', 'President', 'Owner']
list2 = ['bob', 'sue', 'joan']  

zip(list1, list2) will produce:

(Director, bob),
(VP, sue),
(President, joan)

There will be no 'Owner' in the zip object.

============ Mentor Feedback on Question 3:

That's right.  The technical term for this is 'truncate'.

============ Overall Mentor Feedback on Quiz 2:

This is perfect, David. Good job.

-Pat
Grade:

Great
