Lesson 7:  Introduction to Graphical User Interfaces

Project:

Filename(s):  floatsum.py

Write a GUI-based program that provides two Entry fields, a button and a
label. When the button is clicked, the value of each Entry should (if
possible) be converted into a float. If both conversions succeed, the label
should change to the sum of the two numbers. Otherwise it should read
"***ERROR***."

#################
Overall Comments:
#################

Hi David,

This project works and works well. Nicely done.

Here's a design consideration for future projects of this sort. You'll note that tkinter is pretty 
accommodating in terms of expanding containers to accommodate whatever content might show up.

Here, this behavior is little bit disconcerting because the entire application expands and contracts 
is larger or smaller numbers are provided. It might be better to locate the results somewhere that 
won't disrupt things too much.

Overall: excellent job.

-Pat
Grade:

Great


QUIZ 1
######

Q1: Why is the desktop regarded as "two-and-a-half-dimensional"?

The desktop must give the "appearance" of being three dimensions.  Although
there are only two dimensions, some desktop objects appear to be "on top of"
other objects on the desktop.  This appearance, called "the focus," helps
inform the user what he is clicking on and helps the desktop make decisions
about which objects receive the action of the mouse click.   

=======  Mentor Feedback:

These days you may even have a spinning cube of desktops so the desktop is as 3D as 
any perspective animation


Q2: What is the usual name for a graphical component such as a button?

widget

Q3: A Tkinter application is normally a subclass of which object?

tkinter.Frame

###########  Overall Mentor Feedback on Quiz 1:

Overall Comments:
Great job on this one, David.

-Pat
Grade:

Great



QUIZ 2
######

Q1: What configuration item should you set on a button to establish the
function to run when the button is clicked?

command

or

self.my_button["command"] = self.method_on_click

Q2: How would you configure a button B so it does not respond to clicks? B
already exists, and has a handler function that should be left as is.

B.config(state="disabled")

Q3: How would you specify that button B should appear immediately below the
last object created with the same parent?

===========  My First Attempt:

object.pack(side="bottom")

=========== Mentor Feedback:

You're going to want to try this out in a "sandbox" program. You're on the right 
track in your general approach, but this doesn't do what you think.

Overall Comments:
Hi David,

These are all good except for Q3. Could you take another look?

-Pat
Grade:

Try Again


==============  Second Attempt on Question 3:

When using the pack() method, the default value for the side keyword argument is TOP.  So, if you simply go

A.pack()
B.pack()

B will appear immediately below A by default.  However, if you go B.pack() and then A.pack() it will be 
the other way around.  So just pack button B after packing button A.

Mentor Comments:

That's correct because the optional "side =" parameter defaults to TOP. This parameter is kind of weird 
in that it's not so much addressing a property of the object as it is addressing the containing object's 
behavior.  I think of it is setting the direction of "gravitational attraction" present in the container. 
So setting it to TOP is sort of like what you would do in a Tetris application - making all the space 
junk drift to the ceiling.

Overall Comments:
Hi David,

Thanks for taking a 2nd look at this. You found a great solution.

-Pat
Grade:

Great



